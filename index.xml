<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Chunblog</title>
    <link>https://chunbong.github.io/</link>
    <description>Recent content on Chunblog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 11 Nov 2019 01:22:08 +0900</lastBuildDate>
    
	<atom:link href="https://chunbong.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>상속을 이용한 다형성(Polymorphism)</title>
      <link>https://chunbong.github.io/post/java/polymorphism_using_inheritance/</link>
      <pubDate>Mon, 11 Nov 2019 01:22:08 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/java/polymorphism_using_inheritance/</guid>
      <description>자바의 정석(남궁 성) + 열혈강의 객체 중심 Java(강요천) 내용을 정리
 
다형성이란 객체지향개념으로는 여러 가지 형태를 가질 수 있는 능력을 의미
 상속, 인터페이스를 이용해서 다형성을 구현  
상속을 이용한 다형성 부모 클래스 타입의 참조변수로 자식 클래스의 인스턴스를 참조 → 하나의 부모 클래스 타입 참조변수로 여러개의 자식 클래스 인스턴스를 참조할 수 있는 유연한 표현이 가능

Exmaple 1. 부모 타입으로 배열을 선언
class Toy{ ... } class Doll extends Toy{ .</description>
    </item>
    
    <item>
      <title>Admin Site 프로젝트</title>
      <link>https://chunbong.github.io/post/java_web_programming/admin-project-01/</link>
      <pubDate>Thu, 26 Sep 2019 01:19:22 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/java_web_programming/admin-project-01/</guid>
      <description>패스트캠퍼스 강의 프로젝트
 
Admin Site  Admin Site 개발을 통해 서비스의 이해, 용어, 환경, 데이터베이스 구성, 비즈니스의 흐름을 파악할 수 있다  
목표  7개의 테이블이 있는 Admin Site를 개발 사용자가 쇼핑몰에서 아이템을 구매하거나, 관리자가 외부 업체를 관리하는 Admin Site 1000명의 유저와 구매 내역이 5000개가 넘는 데이터를 다룸 Spring Boot를 사용 신규 주문, 신규 유저, 신규 파트너, 신규 상품을 볼 수 있는 대시보드를 제공 고객 관리, 상품 관리, 파트너사 관리, 주문 관리, 카테고리 관리, 어드민 사용자 관리 메뉴를 제공</description>
    </item>
    
    <item>
      <title>BOJ_5397 키로거</title>
      <link>https://chunbong.github.io/post/algorithm/problem-14-boj5397/</link>
      <pubDate>Mon, 23 Sep 2019 03:14:17 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/algorithm/problem-14-boj5397/</guid>
      <description>문제
 
Code testCase = int(input()) for _ in range(testCase): temp = [] password = [] inputPassword = list(input()) for i in range(len(inputPassword)): if inputPassword[i] == &amp;#34;&amp;lt;&amp;#34;: if password: temp.append(password.pop()) elif inputPassword[i] == &amp;#34;&amp;gt;&amp;#34;: if temp: password.append(temp.pop()) elif inputPassword[i] == &amp;#34;-&amp;#34;: if password: password.pop() else: password.append(inputPassword[i]) for i in range(len(temp)-1, -1, -1): password.append(temp[i]) print(&amp;#39;&amp;#39;.join(password)) 
풀이  password 리스트의 끝을 커서로, 커서의 오른쪽을 temp 리스트라고 생각 따라서 &amp;lt; 로 이동할 때는 password의 마지막 원소를 temp로 &amp;gt; 로 이동할 때는 temp의 원소를 password로 옮긴다 - 일 때는 password에서 원소를 하나 삭제한다 마지막에 temp에 남아있는 원소들을 다 password에 추가해준다</description>
    </item>
    
    <item>
      <title>BOJ_1966 프린터 큐</title>
      <link>https://chunbong.github.io/post/algorithm/problem-15-boj1966/</link>
      <pubDate>Sat, 21 Sep 2019 03:14:17 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/algorithm/problem-15-boj1966/</guid>
      <description>문제
 
Code testCase = int(input()) for _ in range(testCase): n, m = map(int, input().split()) q = list(map(int, input().split())) priorityQ = sorted(q, reverse=True) # 중요도를 내림차순으로 정렬 q = [t for t in enumerate(q)] # (index, 중요도)로 q를 구성 count = 0 while True: if q[0][1] == priorityQ[0]: # q[0]의 중요도가 q 내 가장 큰 중요도와 같을 때 count += 1 if q[0][0] == m: print(count) break else: q.</description>
    </item>
    
    <item>
      <title>BOJ_14391 종이 조각</title>
      <link>https://chunbong.github.io/post/algorithm/problem-13-boj14391/</link>
      <pubDate>Wed, 18 Sep 2019 03:14:17 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/algorithm/problem-13-boj14391/</guid>
      <description>문제
 
Code n, m = map(int, input().split()) paper = [list(map(int, input())) for _ in range(n)] answer = -1 for case in range(1&amp;lt;&amp;lt;(n*m)): sum = 0 for i in range(n): num = 0 for j in range(m): idx = i * m + j if (case &amp;amp; (1&amp;lt;&amp;lt;idx)) == 0: num = num * 10 + paper[i][j] else: sum += num num = 0 sum += num for i in range(m): num = 0 for j in range(n): idx = j * m + i if (case &amp;amp; (1&amp;lt;&amp;lt;idx)) !</description>
    </item>
    
    <item>
      <title>BOJ_14889 스타트와 링크</title>
      <link>https://chunbong.github.io/post/algorithm/problem-12-boj14889/</link>
      <pubDate>Mon, 16 Sep 2019 03:17:27 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/algorithm/problem-12-boj14889/</guid>
      <description>문제
 
Code import sys n = int(input()) s = [list(map(int, input().split())) for _ in range(n)] answer = sys.maxsize for subset in range(1, 1&amp;lt;&amp;lt;n): start = [] link = [] if bin(subset).count(&amp;#34;1&amp;#34;) == (n // 2): for i in range(n): if subset &amp;amp; (1&amp;lt;&amp;lt;i): start.append(i) else: link.append(i) else: continue start_capacity = 0 link_capacity = 0 for i in range(n//2): for j in range(n//2): if i == j: continue start_capacity += s[start[i]][start[j]] link_capacity += s[link[i]][link[j]] if abs(start_capacity - link_capacity) &amp;lt; answer: answer = abs(start_capacity - link_capacity) print(answer)</description>
    </item>
    
    <item>
      <title>BOJ_11734 집합</title>
      <link>https://chunbong.github.io/post/algorithm/problem-10-boj11723/</link>
      <pubDate>Mon, 16 Sep 2019 03:14:55 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/algorithm/problem-10-boj11723/</guid>
      <description>문제
 
Code import sys m = int(input()) s = 0 while m != 0: operator, *operand = sys.stdin.readline().split() if len(operand) &amp;gt; 0: num = int(operand[0])-1 if operator == &amp;#34;add&amp;#34;: s |= (1 &amp;lt;&amp;lt; (num)) elif operator == &amp;#34;check&amp;#34;: if s &amp;amp; (1 &amp;lt;&amp;lt; (num)) == 0: print(0) else: print(1) elif operator == &amp;#34;remove&amp;#34;: s &amp;amp;= ~(1 &amp;lt;&amp;lt; (num)) elif operator == &amp;#34;toggle&amp;#34;: s ^= (1 &amp;lt;&amp;lt; (num)) elif operator == &amp;#34;all&amp;#34;: s = (1 &amp;lt;&amp;lt; 20) - 1 else: s = 0 m -= 1</description>
    </item>
    
    <item>
      <title>BOJ_1182 부분수열의 합</title>
      <link>https://chunbong.github.io/post/algorithm/problem-11-boj1182/</link>
      <pubDate>Mon, 16 Sep 2019 03:14:35 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/algorithm/problem-11-boj1182/</guid>
      <description>문제
 
Code n, s = map(int, input().split()) nums = list(map(int, input().split())) elements = (1 &amp;lt;&amp;lt; n) - 1 subset = elements answer = 0 while subset != 0: sum = 0 for i in range(n): if subset &amp;amp; (1 &amp;lt;&amp;lt; i): sum += nums[i] if sum == s: answer += 1 subset = (subset-1) &amp;amp; elements print(answer) 
풀이 부분 수열을 집합과 비트마스크를 사용해서 구할 수 있다.</description>
    </item>
    
    <item>
      <title>Spring - 컨테이너, IoC, IoC 컨테이너</title>
      <link>https://chunbong.github.io/post/java_web_programming/spring-01-ioc/</link>
      <pubDate>Sat, 14 Sep 2019 18:58:16 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/java_web_programming/spring-01-ioc/</guid>
      <description>컨테이너 인스턴스의 라이프 사이클을 관리, 생성된 인스턴스에게 추가적인 기능을 제공
예를 들어, 개발자가 Servlet을 인스턴스화 하는 과정을 거치지 않아도 Tomcat(WAS)이 가지고 있는 Servlet 컨테이너가 Servlet을 메모리에 올린 후 실행한다

IoC ( Inversion of Control ) 의존성에 대한 제어권이 역전되었다 
의존성 class Engine() { } class Car() { Engine engine; public Car() { this.engine = new Engine(); } } 자동차와 엔진의 관계에서(자동차가 엔진을 생성) 자동차가 엔진에 의존한다라고 할 수 있다</description>
    </item>
    
    <item>
      <title>Spring Boot - JPA를 사용한 CRUD 테스트 하기</title>
      <link>https://chunbong.github.io/post/java_web_programming/admin-project-05/</link>
      <pubDate>Fri, 13 Sep 2019 21:13:20 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/java_web_programming/admin-project-05/</guid>
      <description>패스트캠퍼스 강의를 들으며 공부한 내용을 정리
 
 보통 쿼리를 작성할 때
String sql = insert into user(%s, %s, %d) values (account, email, age); 이런 식으로 했다. JPA의 장점은 Object를 사용해서 데이터베이스를 쉽게 다룰 수 있다
 JpaRepository를 상속받으면 기본적인 CRUD를 제공받는다.
 예를 들어, Create 관련은 save(), Read 관련은 findAll(), findById() 등등등등   
Test 코드 작성하기 public class UserRepositorIAyTest extends AdminApplicationTests { @Autowired private UserRepository userRepository; public void create() { } public void read() { } public void update() { } public void delete() { } }</description>
    </item>
    
    <item>
      <title>프로그래머스 - 소수 찾기</title>
      <link>https://chunbong.github.io/post/algorithm/problem-09-programmers01/</link>
      <pubDate>Thu, 12 Sep 2019 03:17:48 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/algorithm/problem-09-programmers01/</guid>
      <description>문제
 
Code from itertools import permutations def solution(numbers): answer = 0 # str -&amp;gt; list splitNumbers = list(numbers) # 입력으로 주어진 숫자들로 가장 큰 수를 만들기 temp = sorted(numbers, reverse=True) temp = &amp;#39;&amp;#39;.join(temp) maxNumber = int(temp) # 0 ~ 가장 큰 수까지 모든 소수 찾기 primeNumbers = [0] * (maxNumber + 1) primeNumbers[0], primeNumbers[1] = -1, -1 for i in range(2, maxNumber+1): j = i * i while j &amp;lt;= maxNumber: primeNumbers[j] = -1 j += i # 1자리 수부터 가능한 모든 자리의 수가 소수인지 확인 check = [False] * (maxNumber + 1) for length in range(1, len(numbers)+1): permutationList = permutations(splitNumbers, length) permutationList = set(permutationList) for number in permutationList: number = &amp;#39;&amp;#39;.</description>
    </item>
    
    <item>
      <title>Spring Boot - JPA, Entity 생성과 Repository</title>
      <link>https://chunbong.github.io/post/java_web_programming/admin-project-04/</link>
      <pubDate>Wed, 11 Sep 2019 21:03:20 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/java_web_programming/admin-project-04/</guid>
      <description>패스트캠퍼스 강의를 들으며 공부한 내용을 정리
 
JPA ( Java Persistent API )  ORM( Object Relational Mapping )으로 관계형 데이터베이스의 정보를 객체지향으로 손쉽게 활용할 수 있도록 도와주는 도구. 라이브러리 Object(자바 객체)와 Relation(관계형 데이터베이스) 둘간의 매핑을 통해서 보다 쉽게 적용할 수 있는 기술을 제공 쿼리에 집중하기 보다는 객체에 집중할 수 있도록  
Entity 생성과 Repository Entity 생성  데이터베이스의 테이블은 JPA의 엔티티와 매핑된다 JPA에서는 어노테이션을 사용해 데이터베이스를 다룰 수 있다  @Entity : 해당 class가 엔티티임을 명시   @Entity를 붙이면 snake case로 된 DB의 column명을 camel case를 사용해 자바 변수로 선언하면 자동으로 매핑해준다  @Table(name= &amp;quot;TABLE_NAME&amp;quot;) : 실제 DB 테이블의 이름을 명시  DB 테이블의 이름과 동일하게 class를 생성하면 생략할 수 있다  @Id : primary key를 명시 @Column : 실제 DB 테이블의 column 이름을 명시 @GeneratedValue : primary key 식별키의 전략을 설정</description>
    </item>
    
    <item>
      <title>BOJ_2512 예산</title>
      <link>https://chunbong.github.io/post/algorithm/problem-08-boj2512/</link>
      <pubDate>Wed, 11 Sep 2019 03:17:48 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/algorithm/problem-08-boj2512/</guid>
      <description>문제
 
Code answer = 0 n = int(input()) budgetRequest = list(map(int, input().split())) totalBudget = int(input()) sumBudgetRequest = sum(budgetRequest) if sumBudgetRequest &amp;lt; totalBudget: answer = max(budgetRequest) else: leftbound = 0 rightbound = max(budgetRequest) while leftbound &amp;lt;= rightbound: mid = (leftbound + rightbound) // 2 sumBudgetRequest = 0 for i in range(n): if budgetRequest[i] &amp;gt; mid: sumBudgetRequest += mid else: sumBudgetRequest += budgetRequest[i] if sumBudgetRequest &amp;lt;= totalBudget: if mid &amp;gt; answer: answer = mid leftbound = mid + 1 else: rightbound = mid - 1 print(answer)</description>
    </item>
    
    <item>
      <title>BOJ_2805 나무 자르기</title>
      <link>https://chunbong.github.io/post/algorithm/problem-07-boj2805/</link>
      <pubDate>Wed, 11 Sep 2019 03:17:06 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/algorithm/problem-07-boj2805/</guid>
      <description>문제
 
Code n, m = map(int, input().split()) h = list(map(int, input().split())) maxH = max(h) leftbound = 0 rightbound = maxH answer = 0 while leftbound &amp;lt;= rightbound: mid = (rightbound + leftbound) // 2 takenLength = 0 for i in range(n): if h[i] &amp;gt; mid: takenLength += (h[i] - mid) if takenLength &amp;gt;= m: leftbound = mid + 1 answer = mid else: rightbound = mid - 1 print(answer)</description>
    </item>
    
    <item>
      <title>2018년 KAKAO BLIND RECRUITMENT - 길 찾기 게임</title>
      <link>https://chunbong.github.io/post/algorithm/problem-06-kakaoblind-05/</link>
      <pubDate>Tue, 10 Sep 2019 03:23:20 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/algorithm/problem-06-kakaoblind-05/</guid>
      <description>문제
 
Code import sys sys.setrecursionlimit(10**6) from operator import itemgetter class Tree: def __init__(self, nodeinfo): self.data = nodeinfo[0] self.nodeNum = self.data[2] leftList = list(filter(lambda x: x[0] &amp;lt; self.data[0], nodeinfo)) rightList = list(filter(lambda x: x[0] &amp;gt; self.data[0], nodeinfo)) if leftList != []: self.left = Tree(leftList) else: self.left = None if rightList != []: self.right = Tree(rightList) else: self.right = None def preorder(root, preorderList): if root is None: return preorderList.</description>
    </item>
    
    <item>
      <title>BOJ_1920 수 찾기</title>
      <link>https://chunbong.github.io/post/algorithm/problem-05-boj1920/</link>
      <pubDate>Mon, 09 Sep 2019 03:14:59 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/algorithm/problem-05-boj1920/</guid>
      <description>문제
 
Code - 이진탐색 import sys sys.setrecursionlimit(10000) n = int(input()) a = list(map(int, input().split())) m = int(input()) nums = list(map(int, input().split())) def binary_search(target, start, end, data): if start &amp;gt; end: return 0 mid = (start + end) // 2 if data[mid] == target: return 1 if data[mid] &amp;lt; target: start = mid + 1 else: end = mid - 1 return binary_search(target, start, end, data) a.sort() for i in range(m): print(binary_search(nums[i], 0, n-1, a))</description>
    </item>
    
    <item>
      <title>2018년 KAKAO BLIND RECRUITMENT - 무지의 먹방 라이브</title>
      <link>https://chunbong.github.io/post/algorithm/problem-04-kakaoblind-04/</link>
      <pubDate>Mon, 09 Sep 2019 03:11:20 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/algorithm/problem-04-kakaoblind-04/</guid>
      <description>문제
 
Code from queue import PriorityQueue def solution(food_times, k): answer = 0 if sum(food_times) &amp;lt;= k: return -1 # (food_times, index)를 사용해 우선순위 큐를 생성 q = PriorityQueue() for i in range(len(food_times)): q.put((food_times[i], i+1)) length = len(food_times) remaining_k = k prev = 0 while (q.queue[0][0] - prev) * length &amp;lt;= remaining_k: remaining_k -= ((q.queue[0][0] - prev) * length) length -= 1 prev = q.get()[0] # 큐에 남아있는 원소를 원래 순서대로 다시 정렬 temp = sorted(q.</description>
    </item>
    
    <item>
      <title>Spring Boot - POST 요청 처리, Content-Type</title>
      <link>https://chunbong.github.io/post/java_web_programming/admin-project-03/</link>
      <pubDate>Sun, 08 Sep 2019 21:13:42 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/java_web_programming/admin-project-03/</guid>
      <description>패스트캠퍼스 강의를 들으며 공부한 내용을 정리
 
POST 요청 처리 
URL Mapping GetController 클래스와 PostCotroller 클래스에 똑같이 @RequestMapping(&amp;quot;/api&amp;quot;)를 쓰는 것은 상관없다. 주소가 겹치는 것은 클래스 내 메서드에 단위로 판단된다
 
POST 요청이 발생하는 경우  HTML form 태그를 사용하는 경우 ajax에서 비동기화 검색 ajax에서 post 방식으로 보내기   
POST 요청 - Parameter 처리 HTTP 통신을 할 때 POST 요청은 요청 메시지의 body에 데이터를 넣어서 보낸다.</description>
    </item>
    
    <item>
      <title>Lombok cannot find sybol 오류 해결 방법</title>
      <link>https://chunbong.github.io/post/java_web_programming/lombok-error-solving/</link>
      <pubDate>Fri, 06 Sep 2019 13:20:38 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/java_web_programming/lombok-error-solving/</guid>
      <description>SearchParam.java에 Lombok annotation을 사용했다. 코드는 에러 표시 없이 잘 활성화 되었고, 위 사진처럼 사용가능한 메서드에 Lombok annotation이 생성해준 메서드들이 잘 나왔다. 그런데 계속 cannot find symbol 오류가 발생했다🤨 더 멘붕인건 Lombok annotation이 생성해준 equals()는 문제없이 호출이 된다는 것이었다&amp;hellip;.

설정 과정  IntelliJ - lombok 플러그인 설치 build.gradle에 compile &amp;quot;org.projectlombok:lombok:1.18.8&amp;quot; 추가 설정 - Enable annotation processing 체크  
Check 사항  설정 - Build, Execution, Deployment - Complier - Annotation Processors - Enable annotation processing에 체크했는지</description>
    </item>
    
    <item>
      <title>Java 웹 프로그래밍 기초 -03. Servlet 라이프 사이클, service 메서드와 템플릿 메서드 패턴</title>
      <link>https://chunbong.github.io/post/java_web_programming/basic-03-servlet-lifecycle-and-service/</link>
      <pubDate>Thu, 05 Sep 2019 02:23:31 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/java_web_programming/basic-03-servlet-lifecycle-and-service/</guid>
      <description>부스트코스 - 웹 프로그래밍에서 배운 내용을 정리
 
Servlet 라이프 사이클 
 Servlet 라이플 사이클 [출처] slipp.net

WAS는 서블릿 요청을 받으면(=URL로 클라이언트가 서버에 요청하면) 해당 서블릿이 메모리에 있는지 확인한다.
만약 메모리에 없으면 해당 서블릿 클래스를 메모리에 올리고(생성자 실행), init(), service()를 실행한다. 또한 WAS는 HttpSevletRequest, HttpServletResponse 객체를 생성해서 service() 메서드의 파라미터로 전달한다. 따라서 요청에 대한 처리, 응답은 service() 메서드를 오버라이딩해서 구현하는 것이다.
만약 메모리에 클라이언트가 요청한 서블릿이 있다면 서블릿 객체를 생성하지 않고 service()만 호출한다.</description>
    </item>
    
    <item>
      <title>2018년 KAKAO BLIND RECRUITMENT - 후보키</title>
      <link>https://chunbong.github.io/post/algorithm/problem-03-kakaoblind-03/</link>
      <pubDate>Wed, 04 Sep 2019 03:19:11 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/algorithm/problem-03-kakaoblind-03/</guid>
      <description>문제
 
Code from itertools import combinations def checkDuplicate(data, length): if len(set(data)) == length: return True # 중복 없음 return False # 중복 있음 def solution(relation): answer = 0 tupleLength = len(relation) columnLength = len(relation[0]) columnList = [i for i in range(columnLength)] columnData = {} for column in range(columnLength): for t in range(tupleLength): if column in columnData: columnData[column].append(relation[t][column]) else: columnData[column] = [relation[t][column]] superkey = [] for key in range(columnLength): if checkDuplicate(columnData[key], tupleLength): superkey.</description>
    </item>
    
    <item>
      <title>2018년 KAKAO BLIND RECRUITMENT - 실패율</title>
      <link>https://chunbong.github.io/post/algorithm/problem-02-kakaoblind-02/</link>
      <pubDate>Tue, 03 Sep 2019 03:20:38 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/algorithm/problem-02-kakaoblind-02/</guid>
      <description>문제
 
Code from operator import itemgetter def solution(N, stages): answer = [] stages.sort() l = len(stages) stages.append(501) now_stage = stages[0] not_clear_user = 0 failure_rate = {} check = [False] * N i = 0 while True: if stages[i] == now_stage: not_clear_user += 1 else: reched_user = l - i + not_clear_user if now_stage != N+1: failure_rate[now_stage] = float(not_clear_user) / float(reched_user) check[now_stage-1] = True now_stage = stages[i] if now_stage == N+1: break not_clear_user = 1 if stages[i] == 501: break i += 1 temp = sorted(failure_rate.</description>
    </item>
    
    <item>
      <title>2018년 KAKAO BLIND RECRUITMENT - 오픈채팅방</title>
      <link>https://chunbong.github.io/post/algorithm/problem-01-kakaoblind-01/</link>
      <pubDate>Tue, 03 Sep 2019 03:12:52 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/algorithm/problem-01-kakaoblind-01/</guid>
      <description>문제
 
Code from collections import deque def solution(record): answer = [] info = [] queue = deque() user = {} for case in record: # 1 info = case.split() queue.append((info[0], info[1])) if len(info) == 3: user[info[1]] = info[2] # 2 while(queue): cmd, id = queue.popleft() nickname = user[id] if cmd == &amp;#34;Enter&amp;#34;: answer.append(nickname + &amp;#34;님이 들어왔습니다.&amp;#34;) elif cmd == &amp;#34;Leave&amp;#34;: answer.append(nickname + &amp;#34;님이 나갔습니다.&amp;#34;) return answer</description>
    </item>
    
    <item>
      <title>정렬 - key 매개 변수, operator 모듈, 딕셔너리 정렬</title>
      <link>https://chunbong.github.io/post/python/sort-01/</link>
      <pubDate>Tue, 03 Sep 2019 02:20:56 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/python/sort-01/</guid>
      <description>sorted() 모든 iterable을 정렬할 수 있다

key 매개 변수  각 정렬 요소에 대해 호출할 함수를 지정할 수 있다. key 매개 변수로 지정된 함수는 정렬 목적으로 사용할 키를 반환해야 한다. 여러 레코드가 같은 키를 가질 때, 원래의 순서가 유지된다 → 정렬 안정성  
특정 인덱스를 기준으로 정렬하기 &amp;gt;&amp;gt;&amp;gt; student_tuples = [ ... (&amp;#39;john&amp;#39;, &amp;#39;A&amp;#39;, 15), ... (&amp;#39;jane&amp;#39;, &amp;#39;B&amp;#39;, 12), ... (&amp;#39;dave&amp;#39;, &amp;#39;B&amp;#39;, 10), ... ] &amp;gt;&amp;gt;&amp;gt; sorted(student_tuples, key=lambda student: student[2]) # sort by age [(&amp;#39;dave&amp;#39;, &amp;#39;B&amp;#39;, 10), (&amp;#39;jane&amp;#39;, &amp;#39;B&amp;#39;, 12), (&amp;#39;john&amp;#39;, &amp;#39;A&amp;#39;, 15)]</description>
    </item>
    
    <item>
      <title>Java 웹 프로그래밍 기초 - 02. Servlet, Servlet 작성 방법</title>
      <link>https://chunbong.github.io/post/java_web_programming/basic-02-create-servlet-2/</link>
      <pubDate>Fri, 30 Aug 2019 02:12:00 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/java_web_programming/basic-02-create-servlet-2/</guid>
      <description>부스트코스 - 웹 프로그래밍에서 배운 내용을 정리
 
Servlet  Java 웹 애플리케이션의 구성 요소 중 동적인 처리를 하는 프로그램의 역할을 한다 즉, 동적인 콘텐츠 제공을 위해서 프로그램을 수행, 페이지를 동적으로 만들어준다 WAS에서 동작하는 Java 클래스이다 HttpServlet 클래스를 상속받아야 한다  
Servlet 작성 방법 웹을 개발할 때 서블릿을 직접 써서 개발하기 보다 프레임워크를 사용해서 개발하는 경우가 더 많다. 하지만 프레임워크들도 서블릿이 없이는 동작할 수 없다.
서블릿 작성 방법은 서블릿의 버전에 따라 두 가지로 나뉘어진다.</description>
    </item>
    
    <item>
      <title>Spring Boot - GET 요청 처리</title>
      <link>https://chunbong.github.io/post/java_web_programming/admin-project-02/</link>
      <pubDate>Thu, 29 Aug 2019 21:11:52 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/java_web_programming/admin-project-02/</guid>
      <description>패스트캠퍼스 강의 내용을 정리
 
컨트롤러 사용자의 요청을 받기 위해 주소를 설정해야 한다.
컨트롤러는 주소들의 묶음을 모아놓은 것을 말한다

GET 요청 처리 방법 @RestController @RequestMapping(&amp;#34;/api&amp;#34;) public class GetController { @RequestMapping(method = RequestMethod.GET, path = &amp;#34;/getMethod&amp;#34;) public String getRequest() { return &amp;#34;Hi getMethod&amp;#34;; } }  @RestController  spring에게 &amp;ldquo;해당 클래스를 RestController로 사용할거야&amp;rdquo;라고 알려주는 어노테이션  @RequestMapping(&amp;quot;/api&amp;quot;)  API 주소를 매핑하기 위해 사용하는 어노테이션 어떤 주소를 받을 것인지 path를 지정 localhost:8080/api 까지 주소가 매핑된다  @RequestMapping(method = RequestMethod.</description>
    </item>
    
    <item>
      <title>소수 판별 알고리즘</title>
      <link>https://chunbong.github.io/post/algorithm/01-prime-number/</link>
      <pubDate>Thu, 29 Aug 2019 03:15:29 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/algorithm/01-prime-number/</guid>
      <description>백준 강의 내용 정리
 
 약수가 1과 자기 자신 밖에 없는 수  
어떤 수가 소수인지 아닌지 판별하는 방법 n이 소수가 아니라면,
루트 n 보다 작거나 같은 수 1개와 이에 대응하는 루트 n 보다 크거나 같은 수의 곱으로 표현할 수 있다. 따라서 루트 n까지만 검색해보면 어떤 수가 소수인지 아닌지 판별할 수 있다
def prime(n): if n &amp;lt; 2: return False i = 2 while i*i &amp;lt;= n: if n % i == 0: return False return True  i는 정수인데 루트 n은 실수이기 때문에 정수-정수 비교를 위해 i*i ≤ n 식을 사용</description>
    </item>
    
    <item>
      <title>Java 웹 프로그래밍 기초 - 01. HelloWorld 서블릿 만들어보기 ✌️</title>
      <link>https://chunbong.github.io/post/java_web_programming/basic-01-create-servlet/</link>
      <pubDate>Thu, 29 Aug 2019 02:15:19 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/java_web_programming/basic-01-create-servlet/</guid>
      <description>  부스트코스 - 웹 프로그래밍에서 배운 내용을 정리
 
목표 http://localhost:8080/firstweb/HelloServlet 접속시 응답

Servlet 생성, URL Mapping  HttpServlet을 상속하는 HelloSevlet class를 생성 eclipse Servlet 생성 창에서 URL Mappings를 확인할 수 있다 eclipse는 runtime으로 설정된 WAS에 다음과 같은 규칙의 URL로 Servlet을 실행하도록 설정한다
http://IP주소:PORT/{프로젝트이름}/{URL Mapping 값}   
Servlet 구현  웹 브라우저가 GET 메서드 방식으로 요청을 보낼 때 Servlet의 doGet() 메서드가 호출된다 @WebServlet : URL Mapping을 위한 어노테이션 HttpServletResponse , HttpServletRequset : 응답, 요청에 필요한 내용들을 모아서 추상화 해놓은 객체 setContentType() : 응답 결과에 대해 브라우저에게 알려주는 내용  브라우저를 확인해보면 Response Headers의 Content-Type 값으로 설정된다  getWriter() : 응답 내용을 넣어줄 통로, PrintWriter 객체를 return  </description>
    </item>
    
  </channel>
</rss>