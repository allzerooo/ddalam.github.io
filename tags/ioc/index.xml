<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>IoC on Chunblog</title>
    <link>https://chunbong.github.io/tags/ioc/</link>
    <description>Recent content in IoC on Chunblog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 14 Sep 2019 18:58:16 +0900</lastBuildDate>
    
	<atom:link href="https://chunbong.github.io/tags/ioc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spring - 컨테이너, IoC, IoC 컨테이너</title>
      <link>https://chunbong.github.io/post/java_web_programming/spring-01-ioc/</link>
      <pubDate>Sat, 14 Sep 2019 18:58:16 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/java_web_programming/spring-01-ioc/</guid>
      <description>컨테이너 인스턴스의 라이프 사이클을 관리, 생성된 인스턴스에게 추가적인 기능을 제공
예를 들어, 개발자가 Servlet을 인스턴스화 하는 과정을 거치지 않아도 Tomcat(WAS)이 가지고 있는 Servlet 컨테이너가 Servlet을 메모리에 올린 후 실행한다

IoC ( Inversion of Control ) 의존성에 대한 제어권이 역전되었다 
의존성 class Engine() { } class Car() { Engine engine; public Car() { this.engine = new Engine(); } } 자동차와 엔진의 관계에서(자동차가 엔진을 생성) 자동차가 엔진에 의존한다라고 할 수 있다</description>
    </item>
    
  </channel>
</rss>