<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>BOJ on Chunblog</title>
    <link>https://chunbong.github.io/tags/boj/</link>
    <description>Recent content in BOJ on Chunblog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 23 Sep 2019 03:14:17 +0900</lastBuildDate>
    
	<atom:link href="https://chunbong.github.io/tags/boj/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>BOJ_5397 키로거</title>
      <link>https://chunbong.github.io/post/algorithm/problem-14-boj5397/</link>
      <pubDate>Mon, 23 Sep 2019 03:14:17 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/algorithm/problem-14-boj5397/</guid>
      <description>문제
 
Code testCase = int(input()) for _ in range(testCase): temp = [] password = [] inputPassword = list(input()) for i in range(len(inputPassword)): if inputPassword[i] == &amp;#34;&amp;lt;&amp;#34;: if password: temp.append(password.pop()) elif inputPassword[i] == &amp;#34;&amp;gt;&amp;#34;: if temp: password.append(temp.pop()) elif inputPassword[i] == &amp;#34;-&amp;#34;: if password: password.pop() else: password.append(inputPassword[i]) for i in range(len(temp)-1, -1, -1): password.append(temp[i]) print(&amp;#39;&amp;#39;.join(password)) 
풀이  password 리스트의 끝을 커서로, 커서의 오른쪽을 temp 리스트라고 생각 따라서 &amp;lt; 로 이동할 때는 password의 마지막 원소를 temp로 &amp;gt; 로 이동할 때는 temp의 원소를 password로 옮긴다 - 일 때는 password에서 원소를 하나 삭제한다 마지막에 temp에 남아있는 원소들을 다 password에 추가해준다</description>
    </item>
    
    <item>
      <title>BOJ_1966 프린터 큐</title>
      <link>https://chunbong.github.io/post/algorithm/problem-15-boj1966/</link>
      <pubDate>Sat, 21 Sep 2019 03:14:17 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/algorithm/problem-15-boj1966/</guid>
      <description>문제
 
Code testCase = int(input()) for _ in range(testCase): n, m = map(int, input().split()) q = list(map(int, input().split())) priorityQ = sorted(q, reverse=True) # 중요도를 내림차순으로 정렬 q = [t for t in enumerate(q)] # (index, 중요도)로 q를 구성 count = 0 while True: if q[0][1] == priorityQ[0]: # q[0]의 중요도가 q 내 가장 큰 중요도와 같을 때 count += 1 if q[0][0] == m: print(count) break else: q.</description>
    </item>
    
    <item>
      <title>BOJ_14391 종이 조각</title>
      <link>https://chunbong.github.io/post/algorithm/problem-13-boj14391/</link>
      <pubDate>Wed, 18 Sep 2019 03:14:17 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/algorithm/problem-13-boj14391/</guid>
      <description>문제
 
Code n, m = map(int, input().split()) paper = [list(map(int, input())) for _ in range(n)] answer = -1 for case in range(1&amp;lt;&amp;lt;(n*m)): sum = 0 for i in range(n): num = 0 for j in range(m): idx = i * m + j if (case &amp;amp; (1&amp;lt;&amp;lt;idx)) == 0: num = num * 10 + paper[i][j] else: sum += num num = 0 sum += num for i in range(m): num = 0 for j in range(n): idx = j * m + i if (case &amp;amp; (1&amp;lt;&amp;lt;idx)) !</description>
    </item>
    
    <item>
      <title>BOJ_14889 스타트와 링크</title>
      <link>https://chunbong.github.io/post/algorithm/problem-12-boj14889/</link>
      <pubDate>Mon, 16 Sep 2019 03:17:27 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/algorithm/problem-12-boj14889/</guid>
      <description>문제
 
Code import sys n = int(input()) s = [list(map(int, input().split())) for _ in range(n)] answer = sys.maxsize for subset in range(1, 1&amp;lt;&amp;lt;n): start = [] link = [] if bin(subset).count(&amp;#34;1&amp;#34;) == (n // 2): for i in range(n): if subset &amp;amp; (1&amp;lt;&amp;lt;i): start.append(i) else: link.append(i) else: continue start_capacity = 0 link_capacity = 0 for i in range(n//2): for j in range(n//2): if i == j: continue start_capacity += s[start[i]][start[j]] link_capacity += s[link[i]][link[j]] if abs(start_capacity - link_capacity) &amp;lt; answer: answer = abs(start_capacity - link_capacity) print(answer)</description>
    </item>
    
    <item>
      <title>BOJ_11734 집합</title>
      <link>https://chunbong.github.io/post/algorithm/problem-10-boj11723/</link>
      <pubDate>Mon, 16 Sep 2019 03:14:55 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/algorithm/problem-10-boj11723/</guid>
      <description>문제
 
Code import sys m = int(input()) s = 0 while m != 0: operator, *operand = sys.stdin.readline().split() if len(operand) &amp;gt; 0: num = int(operand[0])-1 if operator == &amp;#34;add&amp;#34;: s |= (1 &amp;lt;&amp;lt; (num)) elif operator == &amp;#34;check&amp;#34;: if s &amp;amp; (1 &amp;lt;&amp;lt; (num)) == 0: print(0) else: print(1) elif operator == &amp;#34;remove&amp;#34;: s &amp;amp;= ~(1 &amp;lt;&amp;lt; (num)) elif operator == &amp;#34;toggle&amp;#34;: s ^= (1 &amp;lt;&amp;lt; (num)) elif operator == &amp;#34;all&amp;#34;: s = (1 &amp;lt;&amp;lt; 20) - 1 else: s = 0 m -= 1</description>
    </item>
    
    <item>
      <title>BOJ_1182 부분수열의 합</title>
      <link>https://chunbong.github.io/post/algorithm/problem-11-boj1182/</link>
      <pubDate>Mon, 16 Sep 2019 03:14:35 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/algorithm/problem-11-boj1182/</guid>
      <description>문제
 
Code n, s = map(int, input().split()) nums = list(map(int, input().split())) elements = (1 &amp;lt;&amp;lt; n) - 1 subset = elements answer = 0 while subset != 0: sum = 0 for i in range(n): if subset &amp;amp; (1 &amp;lt;&amp;lt; i): sum += nums[i] if sum == s: answer += 1 subset = (subset-1) &amp;amp; elements print(answer) 
풀이 부분 수열을 집합과 비트마스크를 사용해서 구할 수 있다.</description>
    </item>
    
    <item>
      <title>BOJ_2512 예산</title>
      <link>https://chunbong.github.io/post/algorithm/problem-08-boj2512/</link>
      <pubDate>Wed, 11 Sep 2019 03:17:48 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/algorithm/problem-08-boj2512/</guid>
      <description>문제
 
Code answer = 0 n = int(input()) budgetRequest = list(map(int, input().split())) totalBudget = int(input()) sumBudgetRequest = sum(budgetRequest) if sumBudgetRequest &amp;lt; totalBudget: answer = max(budgetRequest) else: leftbound = 0 rightbound = max(budgetRequest) while leftbound &amp;lt;= rightbound: mid = (leftbound + rightbound) // 2 sumBudgetRequest = 0 for i in range(n): if budgetRequest[i] &amp;gt; mid: sumBudgetRequest += mid else: sumBudgetRequest += budgetRequest[i] if sumBudgetRequest &amp;lt;= totalBudget: if mid &amp;gt; answer: answer = mid leftbound = mid + 1 else: rightbound = mid - 1 print(answer)</description>
    </item>
    
    <item>
      <title>BOJ_2805 나무 자르기</title>
      <link>https://chunbong.github.io/post/algorithm/problem-07-boj2805/</link>
      <pubDate>Wed, 11 Sep 2019 03:17:06 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/algorithm/problem-07-boj2805/</guid>
      <description>문제
 
Code n, m = map(int, input().split()) h = list(map(int, input().split())) maxH = max(h) leftbound = 0 rightbound = maxH answer = 0 while leftbound &amp;lt;= rightbound: mid = (rightbound + leftbound) // 2 takenLength = 0 for i in range(n): if h[i] &amp;gt; mid: takenLength += (h[i] - mid) if takenLength &amp;gt;= m: leftbound = mid + 1 answer = mid else: rightbound = mid - 1 print(answer)</description>
    </item>
    
    <item>
      <title>BOJ_1920 수 찾기</title>
      <link>https://chunbong.github.io/post/algorithm/problem-05-boj1920/</link>
      <pubDate>Mon, 09 Sep 2019 03:14:59 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/algorithm/problem-05-boj1920/</guid>
      <description>문제
 
Code - 이진탐색 import sys sys.setrecursionlimit(10000) n = int(input()) a = list(map(int, input().split())) m = int(input()) nums = list(map(int, input().split())) def binary_search(target, start, end, data): if start &amp;gt; end: return 0 mid = (start + end) // 2 if data[mid] == target: return 1 if data[mid] &amp;lt; target: start = mid + 1 else: end = mid - 1 return binary_search(target, start, end, data) a.sort() for i in range(m): print(binary_search(nums[i], 0, n-1, a))</description>
    </item>
    
  </channel>
</rss>