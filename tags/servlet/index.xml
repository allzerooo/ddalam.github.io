<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Servlet on Chunblog</title>
    <link>https://chunbong.github.io/tags/servlet/</link>
    <description>Recent content in Servlet on Chunblog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 05 Sep 2019 02:23:31 +0900</lastBuildDate>
    
	<atom:link href="https://chunbong.github.io/tags/servlet/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java 웹 프로그래밍 기초 -03. Servlet 라이프 사이클, service 메서드와 템플릿 메서드 패턴</title>
      <link>https://chunbong.github.io/post/java_web_programming/basic-03-servlet-lifecycle-and-service/</link>
      <pubDate>Thu, 05 Sep 2019 02:23:31 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/java_web_programming/basic-03-servlet-lifecycle-and-service/</guid>
      <description>부스트코스 - 웹 프로그래밍에서 배운 내용을 정리
 
Servlet 라이프 사이클 
 Servlet 라이플 사이클 [출처] slipp.net

WAS는 서블릿 요청을 받으면(=URL로 클라이언트가 서버에 요청하면) 해당 서블릿이 메모리에 있는지 확인한다.
만약 메모리에 없으면 해당 서블릿 클래스를 메모리에 올리고(생성자 실행), init(), service()를 실행한다. 또한 WAS는 HttpSevletRequest, HttpServletResponse 객체를 생성해서 service() 메서드의 파라미터로 전달한다. 따라서 요청에 대한 처리, 응답은 service() 메서드를 오버라이딩해서 구현하는 것이다.
만약 메모리에 클라이언트가 요청한 서블릿이 있다면 서블릿 객체를 생성하지 않고 service()만 호출한다.</description>
    </item>
    
    <item>
      <title>Java 웹 프로그래밍 기초 - 02. Servlet, Servlet 작성 방법</title>
      <link>https://chunbong.github.io/post/java_web_programming/basic-02-create-servlet-2/</link>
      <pubDate>Fri, 30 Aug 2019 02:12:00 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/java_web_programming/basic-02-create-servlet-2/</guid>
      <description>부스트코스 - 웹 프로그래밍에서 배운 내용을 정리
 
Servlet  Java 웹 애플리케이션의 구성 요소 중 동적인 처리를 하는 프로그램의 역할을 한다 즉, 동적인 콘텐츠 제공을 위해서 프로그램을 수행, 페이지를 동적으로 만들어준다 WAS에서 동작하는 Java 클래스이다 HttpServlet 클래스를 상속받아야 한다  
Servlet 작성 방법 웹을 개발할 때 서블릿을 직접 써서 개발하기 보다 프레임워크를 사용해서 개발하는 경우가 더 많다. 하지만 프레임워크들도 서블릿이 없이는 동작할 수 없다.
서블릿 작성 방법은 서블릿의 버전에 따라 두 가지로 나뉘어진다.</description>
    </item>
    
    <item>
      <title>Java 웹 프로그래밍 기초 - 01. HelloWorld 서블릿 만들어보기 ✌️</title>
      <link>https://chunbong.github.io/post/java_web_programming/basic-01-create-servlet/</link>
      <pubDate>Thu, 29 Aug 2019 02:15:19 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/java_web_programming/basic-01-create-servlet/</guid>
      <description>  부스트코스 - 웹 프로그래밍에서 배운 내용을 정리
 
목표 http://localhost:8080/firstweb/HelloServlet 접속시 응답

Servlet 생성, URL Mapping  HttpServlet을 상속하는 HelloSevlet class를 생성 eclipse Servlet 생성 창에서 URL Mappings를 확인할 수 있다 eclipse는 runtime으로 설정된 WAS에 다음과 같은 규칙의 URL로 Servlet을 실행하도록 설정한다
http://IP주소:PORT/{프로젝트이름}/{URL Mapping 값}   
Servlet 구현  웹 브라우저가 GET 메서드 방식으로 요청을 보낼 때 Servlet의 doGet() 메서드가 호출된다 @WebServlet : URL Mapping을 위한 어노테이션 HttpServletResponse , HttpServletRequset : 응답, 요청에 필요한 내용들을 모아서 추상화 해놓은 객체 setContentType() : 응답 결과에 대해 브라우저에게 알려주는 내용  브라우저를 확인해보면 Response Headers의 Content-Type 값으로 설정된다  getWriter() : 응답 내용을 넣어줄 통로, PrintWriter 객체를 return  </description>
    </item>
    
  </channel>
</rss>