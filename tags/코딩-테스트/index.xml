<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>코딩 테스트 on Chunbong</title>
    <link>https://chunbong.github.io/tags/%EC%BD%94%EB%94%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8/</link>
    <description>Recent content in 코딩 테스트 on Chunbong</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 09 Sep 2019 03:11:20 +0900</lastBuildDate>
    
	<atom:link href="https://chunbong.github.io/tags/%EC%BD%94%EB%94%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2018년 KAKAO BLIND RECRUITMENT - 무지의 먹방 라이브</title>
      <link>https://chunbong.github.io/post/algorithm/problem-04-kakaoblind-04/</link>
      <pubDate>Mon, 09 Sep 2019 03:11:20 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/algorithm/problem-04-kakaoblind-04/</guid>
      <description>문제
 
Code from queue import PriorityQueue def solution(food_times, k): answer = 0 if sum(food_times) &amp;lt;= k: return -1 # (food_times, index)를 사용해 우선순위 큐를 생성 q = PriorityQueue() for i in range(len(food_times)): q.put((food_times[i], i+1)) length = len(food_times) remaining_k = k prev = 0 while (q.queue[0][0] - prev) * length &amp;lt;= remaining_k: remaining_k -= ((q.queue[0][0] - prev) * length) length -= 1 prev = q.get()[0] # 큐에 남아있는 원소를 원래 순서대로 다시 정렬 temp = sorted(q.</description>
    </item>
    
    <item>
      <title>2018년 KAKAO BLIND RECRUITMENT - 후보키</title>
      <link>https://chunbong.github.io/post/algorithm/problem-03-kakaoblind-03/</link>
      <pubDate>Wed, 04 Sep 2019 03:19:11 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/algorithm/problem-03-kakaoblind-03/</guid>
      <description>문제
 
Code from itertools import combinations def checkDuplicate(data, length): if len(set(data)) == length: return True # 중복 없음 return False # 중복 있음 def solution(relation): answer = 0 tupleLength = len(relation) columnLength = len(relation[0]) columnList = [i for i in range(columnLength)] columnData = {} for column in range(columnLength): for t in range(tupleLength): if column in columnData: columnData[column].append(relation[t][column]) else: columnData[column] = [relation[t][column]] superkey = [] for key in range(columnLength): if checkDuplicate(columnData[key], tupleLength): superkey.</description>
    </item>
    
    <item>
      <title>2018년 KAKAO BLIND RECRUITMENT - 실패율</title>
      <link>https://chunbong.github.io/post/algorithm/problem-02-kakaoblind-02/</link>
      <pubDate>Tue, 03 Sep 2019 03:20:38 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/algorithm/problem-02-kakaoblind-02/</guid>
      <description>문제
 
Code from operator import itemgetter def solution(N, stages): answer = [] stages.sort() l = len(stages) stages.append(501) now_stage = stages[0] not_clear_user = 0 failure_rate = {} check = [False] * N i = 0 while True: if stages[i] == now_stage: not_clear_user += 1 else: reched_user = l - i + not_clear_user if now_stage != N+1: failure_rate[now_stage] = float(not_clear_user) / float(reched_user) check[now_stage-1] = True now_stage = stages[i] if now_stage == N+1: break not_clear_user = 1 if stages[i] == 501: break i += 1 temp = sorted(failure_rate.</description>
    </item>
    
    <item>
      <title>2018년 KAKAO BLIND RECRUITMENT - 오픈채팅방</title>
      <link>https://chunbong.github.io/post/algorithm/problem-01-kakaoblind-01/</link>
      <pubDate>Tue, 03 Sep 2019 03:12:52 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/algorithm/problem-01-kakaoblind-01/</guid>
      <description>문제
 
Code from collections import deque def solution(record): answer = [] info = [] queue = deque() user = {} for case in record: # 1 info = case.split() queue.append((info[0], info[1])) if len(info) == 3: user[info[1]] = info[2] # 2 while(queue): cmd, id = queue.popleft() nickname = user[id] if cmd == &amp;#34;Enter&amp;#34;: answer.append(nickname + &amp;#34;님이 들어왔습니다.&amp;#34;) elif cmd == &amp;#34;Leave&amp;#34;: answer.append(nickname + &amp;#34;님이 나갔습니다.&amp;#34;) return answer</description>
    </item>
    
  </channel>
</rss>