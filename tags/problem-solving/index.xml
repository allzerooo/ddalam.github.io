<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Problem Solving on Chunblog</title>
    <link>https://chunbong.github.io/tags/problem-solving/</link>
    <description>Recent content in Problem Solving on Chunblog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 16 Sep 2019 03:14:55 +0900</lastBuildDate>
    
	<atom:link href="https://chunbong.github.io/tags/problem-solving/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>BOJ_11734 집합</title>
      <link>https://chunbong.github.io/post/algorithm/problem-10-boj11723/</link>
      <pubDate>Mon, 16 Sep 2019 03:14:55 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/algorithm/problem-10-boj11723/</guid>
      <description>문제
 
Code import sys m = int(input()) s = 0 while m != 0: operator, *operand = sys.stdin.readline().split() if len(operand) &amp;gt; 0: num = int(operand[0])-1 if operator == &amp;#34;add&amp;#34;: s |= (1 &amp;lt;&amp;lt; (num)) elif operator == &amp;#34;check&amp;#34;: if s &amp;amp; (1 &amp;lt;&amp;lt; (num)) == 0: print(0) else: print(1) elif operator == &amp;#34;remove&amp;#34;: s &amp;amp;= ~(1 &amp;lt;&amp;lt; (num)) elif operator == &amp;#34;toggle&amp;#34;: s ^= (1 &amp;lt;&amp;lt; (num)) elif operator == &amp;#34;all&amp;#34;: s = (1 &amp;lt;&amp;lt; 20) - 1 else: s = 0 m -= 1</description>
    </item>
    
    <item>
      <title>BOJ_1182 부부수열의 합</title>
      <link>https://chunbong.github.io/post/algorithm/problem-11-boj1182/</link>
      <pubDate>Mon, 16 Sep 2019 03:14:35 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/algorithm/problem-11-boj1182/</guid>
      <description>문제
 
Code n, s = map(int, input().split()) nums = list(map(int, input().split())) elements = (1 &amp;lt;&amp;lt; n) - 1 subset = elements answer = 0 while subset != 0: sum = 0 for i in range(n): if subset &amp;amp; (1 &amp;lt;&amp;lt; i): sum += nums[i] if sum == s: answer += 1 subset = (subset-1) &amp;amp; elements print(answer) 
풀이 부분 수열을 집합과 비트마스크를 사용해서 구할 수 있다.</description>
    </item>
    
    <item>
      <title>프로그래머스 - 소수 찾기</title>
      <link>https://chunbong.github.io/post/algorithm/problem-09-programmers01/</link>
      <pubDate>Thu, 12 Sep 2019 03:17:48 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/algorithm/problem-09-programmers01/</guid>
      <description>문제
 
Code from itertools import permutations def solution(numbers): answer = 0 # str -&amp;gt; list splitNumbers = list(numbers) # 입력으로 주어진 숫자들로 가장 큰 수를 만들기 temp = sorted(numbers, reverse=True) temp = &amp;#39;&amp;#39;.join(temp) maxNumber = int(temp) # 0 ~ 가장 큰 수까지 모든 소수 찾기 primeNumbers = [0] * (maxNumber + 1) primeNumbers[0], primeNumbers[1] = -1, -1 for i in range(2, maxNumber+1): j = i * i while j &amp;lt;= maxNumber: primeNumbers[j] = -1 j += i # 1자리 수부터 가능한 모든 자리의 수가 소수인지 확인 check = [False] * (maxNumber + 1) for length in range(1, len(numbers)+1): permutationList = permutations(splitNumbers, length) permutationList = set(permutationList) for number in permutationList: number = &amp;#39;&amp;#39;.</description>
    </item>
    
    <item>
      <title>BOJ_2512 예산</title>
      <link>https://chunbong.github.io/post/algorithm/problem-08-boj2512/</link>
      <pubDate>Wed, 11 Sep 2019 03:17:48 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/algorithm/problem-08-boj2512/</guid>
      <description>문제
 
Code answer = 0 n = int(input()) budgetRequest = list(map(int, input().split())) totalBudget = int(input()) sumBudgetRequest = sum(budgetRequest) if sumBudgetRequest &amp;lt; totalBudget: answer = max(budgetRequest) else: leftbound = 0 rightbound = max(budgetRequest) while leftbound &amp;lt;= rightbound: mid = (leftbound + rightbound) // 2 sumBudgetRequest = 0 for i in range(n): if budgetRequest[i] &amp;gt; mid: sumBudgetRequest += mid else: sumBudgetRequest += budgetRequest[i] if sumBudgetRequest &amp;lt;= totalBudget: if mid &amp;gt; answer: answer = mid leftbound = mid + 1 else: rightbound = mid - 1 print(answer)</description>
    </item>
    
    <item>
      <title>BOJ_2805 나무 자르기</title>
      <link>https://chunbong.github.io/post/algorithm/problem-07-boj2805/</link>
      <pubDate>Wed, 11 Sep 2019 03:17:06 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/algorithm/problem-07-boj2805/</guid>
      <description>문제
 
Code n, m = map(int, input().split()) h = list(map(int, input().split())) maxH = max(h) leftbound = 0 rightbound = maxH answer = 0 while leftbound &amp;lt;= rightbound: mid = (rightbound + leftbound) // 2 takenLength = 0 for i in range(n): if h[i] &amp;gt; mid: takenLength += (h[i] - mid) if takenLength &amp;gt;= m: leftbound = mid + 1 answer = mid else: rightbound = mid - 1 print(answer)</description>
    </item>
    
    <item>
      <title>2018년 KAKAO BLIND RECRUITMENT - 길 찾기 게임</title>
      <link>https://chunbong.github.io/post/algorithm/problem-06-kakaoblind-05/</link>
      <pubDate>Tue, 10 Sep 2019 03:23:20 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/algorithm/problem-06-kakaoblind-05/</guid>
      <description>문제
 
Code import sys sys.setrecursionlimit(10**6) from operator import itemgetter class Tree: def __init__(self, nodeinfo): self.data = nodeinfo[0] self.nodeNum = self.data[2] leftList = list(filter(lambda x: x[0] &amp;lt; self.data[0], nodeinfo)) rightList = list(filter(lambda x: x[0] &amp;gt; self.data[0], nodeinfo)) if leftList != []: self.left = Tree(leftList) else: self.left = None if rightList != []: self.right = Tree(rightList) else: self.right = None def preorder(root, preorderList): if root is None: return preorderList.</description>
    </item>
    
    <item>
      <title>BOJ_1920 수 찾기</title>
      <link>https://chunbong.github.io/post/algorithm/problem-05-boj1920/</link>
      <pubDate>Mon, 09 Sep 2019 03:14:59 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/algorithm/problem-05-boj1920/</guid>
      <description>문제
 
Code - 이진탐색 import sys sys.setrecursionlimit(10000) n = int(input()) a = list(map(int, input().split())) m = int(input()) nums = list(map(int, input().split())) def binary_search(target, start, end, data): if start &amp;gt; end: return 0 mid = (start + end) // 2 if data[mid] == target: return 1 if data[mid] &amp;lt; target: start = mid + 1 else: end = mid - 1 return binary_search(target, start, end, data) a.sort() for i in range(m): print(binary_search(nums[i], 0, n-1, a))</description>
    </item>
    
    <item>
      <title>2018년 KAKAO BLIND RECRUITMENT - 무지의 먹방 라이브</title>
      <link>https://chunbong.github.io/post/algorithm/problem-04-kakaoblind-04/</link>
      <pubDate>Mon, 09 Sep 2019 03:11:20 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/algorithm/problem-04-kakaoblind-04/</guid>
      <description>문제
 
Code from queue import PriorityQueue def solution(food_times, k): answer = 0 if sum(food_times) &amp;lt;= k: return -1 # (food_times, index)를 사용해 우선순위 큐를 생성 q = PriorityQueue() for i in range(len(food_times)): q.put((food_times[i], i+1)) length = len(food_times) remaining_k = k prev = 0 while (q.queue[0][0] - prev) * length &amp;lt;= remaining_k: remaining_k -= ((q.queue[0][0] - prev) * length) length -= 1 prev = q.get()[0] # 큐에 남아있는 원소를 원래 순서대로 다시 정렬 temp = sorted(q.</description>
    </item>
    
    <item>
      <title>2018년 KAKAO BLIND RECRUITMENT - 후보키</title>
      <link>https://chunbong.github.io/post/algorithm/problem-03-kakaoblind-03/</link>
      <pubDate>Wed, 04 Sep 2019 03:19:11 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/algorithm/problem-03-kakaoblind-03/</guid>
      <description>문제
 
Code from itertools import combinations def checkDuplicate(data, length): if len(set(data)) == length: return True # 중복 없음 return False # 중복 있음 def solution(relation): answer = 0 tupleLength = len(relation) columnLength = len(relation[0]) columnList = [i for i in range(columnLength)] columnData = {} for column in range(columnLength): for t in range(tupleLength): if column in columnData: columnData[column].append(relation[t][column]) else: columnData[column] = [relation[t][column]] superkey = [] for key in range(columnLength): if checkDuplicate(columnData[key], tupleLength): superkey.</description>
    </item>
    
    <item>
      <title>2018년 KAKAO BLIND RECRUITMENT - 실패율</title>
      <link>https://chunbong.github.io/post/algorithm/problem-02-kakaoblind-02/</link>
      <pubDate>Tue, 03 Sep 2019 03:20:38 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/algorithm/problem-02-kakaoblind-02/</guid>
      <description>문제
 
Code from operator import itemgetter def solution(N, stages): answer = [] stages.sort() l = len(stages) stages.append(501) now_stage = stages[0] not_clear_user = 0 failure_rate = {} check = [False] * N i = 0 while True: if stages[i] == now_stage: not_clear_user += 1 else: reched_user = l - i + not_clear_user if now_stage != N+1: failure_rate[now_stage] = float(not_clear_user) / float(reched_user) check[now_stage-1] = True now_stage = stages[i] if now_stage == N+1: break not_clear_user = 1 if stages[i] == 501: break i += 1 temp = sorted(failure_rate.</description>
    </item>
    
    <item>
      <title>2018년 KAKAO BLIND RECRUITMENT - 오픈채팅방</title>
      <link>https://chunbong.github.io/post/algorithm/problem-01-kakaoblind-01/</link>
      <pubDate>Tue, 03 Sep 2019 03:12:52 +0900</pubDate>
      
      <guid>https://chunbong.github.io/post/algorithm/problem-01-kakaoblind-01/</guid>
      <description>문제
 
Code from collections import deque def solution(record): answer = [] info = [] queue = deque() user = {} for case in record: # 1 info = case.split() queue.append((info[0], info[1])) if len(info) == 3: user[info[1]] = info[2] # 2 while(queue): cmd, id = queue.popleft() nickname = user[id] if cmd == &amp;#34;Enter&amp;#34;: answer.append(nickname + &amp;#34;님이 들어왔습니다.&amp;#34;) elif cmd == &amp;#34;Leave&amp;#34;: answer.append(nickname + &amp;#34;님이 나갔습니다.&amp;#34;) return answer</description>
    </item>
    
  </channel>
</rss>